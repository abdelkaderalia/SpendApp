import pandas as pd
import numpy as np
import sys
import requests


def CGAC_list():
    """
    This function downloads the CGAC table from the Defense Logistics Agency's website and processes it for use in the Spend App.
    Input: Link to download Excel file from DLA website (string)
    Output: Dataframe of CGAC and Agency Name table (pd.Dataframe)
    """
    url = 'https://www.dla.mil/Portals/104/Documents/DLMS/Committees/DoDAAD/CGAC-Table-for-DoDAAD.xlsx' # Store link
    r = requests.get(url) # Make request
    open('temp.xlsx', 'wb').write(r.content) # Store results in a temporary file
    df = pd.read_excel('temp.xlsx') # Read in as df
    df = df.iloc[3:,1:3] # Remove header rows
    df.columns = df.iloc[0] # Use first row for column names
    df = df.tail(df.shape[0] -1) # Remove first row
    df['AGENCY NAME']=df['AGENCY NAME'].str.title() # Reformat agency name from all caps to proper case (capitalize the first letter of each word)

    to_replace = ['The Judicial Branch','The Legislative Branch','Agriculture, Department Of (1200)','Commerce, Department Of (1300)','Interior, Department Of The (1400)','Justice, Department Of (1500)','Labor, Department Of (1600)','State, Department Of (1900)','Treasury, Department Of The (2000)','Office Of Personnel Management (2400)','Social Security Administration (2800)','Nuclear Regulatory Commission (3100)','General Services Administration (4700)','National Science Foundation (4900)','Environmental Protection Agency (6800)','Homeland Security, Department Of (7000)','Agency For International Development (1152)','Small Business Administration (7300)','Health And Human Services, Department Of (7500)','National Aeronautics And Space Administration (8000)','Housing And Urban Development, Department Of (8600)','Energy, Department Of (8900)','Education, Department Of (9100)','Veterans Affairs, Department Of 3600)','Transportation, Department Of'] # Create list of terms to find and replace

    replace_values = ['Judicial Branch','Legislative Branch','Department of Agriculture','Department of Commerce','Department of the Interior','Department of Justice','Department of Labor','Department of State','Department of the Treasury','Office of Personnel Management','Social Security Administration','Nuclear Regulatory Commission','General Services Administration','National Science Foundation','Environmental Protection Agency','Department of Homeland Security','Agency for International Development','Small Business Administration','Department of Health and Human Services','National Aeronautics and Space Administration','Department of Housing and Urban Development','Department of Energy','Department of Education','Department of Veterans Affairs','Department of Transportation'] # Create list of terms to replace with

    df = df.replace(to_replace,replace_values) # Find and replace in agency name
    # Do some more finding & replacing
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('Of','of')
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('On','on')
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('Or','or')
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('organization','Organization')
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('For','for')
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('forces','Forces')
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('The','the')
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('And','and')
    df['AGENCY NAME'] = df['AGENCY NAME'].str.replace('off','Off')
    new_row = pd.DataFrame({'CGAC':'097', 'AGENCY NAME':'Department of Defense'},index =[0]) # Add row for Department of Defense, which was on the second tab of the DLA Excel file
    df = pd.concat([new_row, df]).reset_index(drop = True) # Reset index
    df = df.drop_duplicates(subset=['AGENCY NAME']) # Drop duplicates
    df = df.sort_values(by=['AGENCY NAME']) # Sort by agency name

    for code in df['CGAC']: # For all CGAC codes
        full = pd.DataFrame(columns=['fiscal_year','latest_action_date','toptier_code','transaction_count','obligations','messages'])
        for year in range(2008,2023): # For all years in range
            # Request award data from API
            url = 'https://api.usaspending.gov'
            endpoint=f'/api/v2/agency/{code}/awards/'
            payload = {"fiscal_year":year}

            response = requests.get(f'{url}{endpoint}',params=payload)
            #print(response.status_code)
            if response.status_code == 200:
                data = response.json()
                a = pd.DataFrame(data.items()).transpose()
                a.columns = a.iloc[0]
                a = a.tail(a.shape[0] -1)
                full = full.append(a)

        if full.shape[0]==0: # If results from 2008-2022 show 0 rows
            df = df[df.CGAC!=code] # Remove this agency from the CGAC list
    # Add a blank row to the top, so the dropdown selections in Spend App will default to blank
    new_row = pd.DataFrame({'CGAC':' ', 'AGENCY NAME':' '},index =[0])
    df = pd.concat([new_row, df]).reset_index(drop = True)

    return df

df = CGAC_list() # Run function
df.to_excel('/Users/Alia/Documents/Github/SpendApp/Clean_Data/CGAC_list.xlsx',index = False, header=True) # Store results in Github repository


def filter_no_detail():
    """
    This function further cleans the CGAC list by checking all agencies against another API endpoint and removing the ones that do not return data
    Input: Dataframe of CGAC and Agency Name table (pd.Dataframe)
    Output: Dataframe of CGAC and Agency Name table, cleaned (pd.Dataframe)
    """
    df = pd.read_excel('/Users/Alia/Documents/Github/SpendApp/Clean_Data/CGAC_list.xlsx') # Read in data from Github repository
    for code in df['CGAC'][1:]: # For all CGAC codes starting with row 2 (row 1 is blank)
        full = pd.DataFrame(columns=['fiscal_year','name','abbreviation','total_obligations','transaction_count','new_award_count','children']) # Create a dataframe to store results
        for year in range(2008,2023): # For all years 2008-2022
            # Request subagency data from API
            url = 'https://api.usaspending.gov'
            endpoint=f'/api/v2/agency/{code}/sub_agency/'
            payload = {"fiscal_year":year}
            response = requests.get(f'{url}{endpoint}',params=payload)
            #print(response.status_code)
            if response.status_code == 200:
                data = response.json()
                a = pd.DataFrame(data['results'])
                full = full.append(a)

        if full.shape[0]==0: # If results from 2008-2022 show 0 rows
            df = df[df.CGAC!=code] # Remove this agency from the CGAC list

    return df

df = filter_no_detail() # Run function and store output
df2 = df.reset_index(drop = True) # Reset index

df2.to_excel('/Users/Alia/Documents/Github/SpendApp/Clean_Data/CGAC_list.xlsx',index = False, header=True) # Resave cleaned CGAC list to Github repository. The Spend App loads it from there.
